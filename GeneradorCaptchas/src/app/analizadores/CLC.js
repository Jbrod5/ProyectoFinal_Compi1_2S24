/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CLC = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,5],$V3=[2,5,85,88],$V4=[1,30],$V5=[1,36],$V6=[1,53],$V7=[1,54],$V8=[1,55],$V9=[1,56],$Va=[1,57],$Vb=[1,59],$Vc=[1,58],$Vd=[1,48],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,37],$Vk=[1,38],$Vl=[1,40],$Vm=[1,39],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[87,91],$Vs=[2,8,31,32,33,34,35,36,37,38,40,42,43,44,45,63,68,71,74,87,91,94,95,96,97],$Vt=[1,69],$Vu=[1,82],$Vv=[17,18,19,20,21,47,54,56,57,58,59,60,80],$Vw=[17,80],$Vx=[17,47,80],$Vy=[1,110],$Vz=[1,111],$VA=[1,112],$VB=[1,113],$VC=[1,114],$VD=[1,115],$VE=[1,116],$VF=[1,117],$VG=[1,122],$VH=[1,135],$VI=[1,134],$VJ=[2,61],$VK=[1,152],$VL=[1,151],$VM=[1,153],$VN=[1,154],$VO=[1,157],$VP=[1,161],$VQ=[1,164],$VR=[1,169],$VS=[1,170],$VT=[1,172],$VU=[1,173],$VV=[1,174],$VW=[1,175],$VX=[17,18,19,20,21,47,56,57,58,59,60,80],$VY=[1,210],$VZ=[1,211],$V_=[1,212],$V$=[1,213],$V01=[17,18,19,20,21,54,80],$V11=[17,54,80],$V21=[17,18,19,47,56,57,58,59,60,80],$V31=[17,18,19,54,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"functions":4,"EOF":5,"function":6,"valor":7,"ID":8,"TRUE":9,"FALSE":10,"DECIMAL":11,"INTEGER":12,"CHAR":13,"STRING":14,"PAROPN":15,"condicion":16,"PARCLS":17,"MAS":18,"MEN":19,"TIM":20,"DIV":21,"funcion_st":22,"numero_aleatorio":23,"asc":24,"desc":25,"letpar_num":26,"letimpar_num":27,"reverse":28,"caracter_aleatorio":29,"getElement":30,"ASC":31,"DESC":32,"LETPAR_NUM":33,"LETIMPAR_NUM":34,"REVERSE":35,"GET_ELEMENT":36,"CARACTER_ALEATORIO":37,"NUM_ALEATORIO":38,"declaracion":39,"INT":40,"identificadores":41,"STR":42,"DEC":43,"CHA":44,"BOO":45,"GLOBAL":46,"EQU":47,"ints":48,"strs":49,"decs":50,"chas":51,"boos":52,"numero":53,"COMMA":54,"valbool":55,"AND":56,"ORS":57,"EXCLAM":58,"MENQUE":59,"MAYQUE":60,"asignacion":61,"if_exp":62,"IF":63,"THEN":64,"expresion":65,"bloque_ins":66,"elif_exp":67,"ELSE":68,"else_exp":69,"while_exp":70,"WHILE":71,"THENWHILE":72,"repeat":73,"REPEAT":74,"variable":75,"HUNTIL":76,"num":77,"num_aleatorio":78,"expresiones":79,"SEMIC":80,"alert_info":81,"exit":82,"redirect":83,"insert":84,"FUNCTION":85,"COROPN":86,"CORCLS":87,"ONLOAD":88,"INIT":89,"LLAVOP":90,"COLON":91,"LLAVCL":92,"END":93,"ALERT_INFO":94,"EXIT":95,"REDIRECT":96,"INSERT":97,"inserts":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"TRUE",10:"FALSE",11:"DECIMAL",12:"INTEGER",13:"CHAR",14:"STRING",15:"PAROPN",17:"PARCLS",18:"MAS",19:"MEN",20:"TIM",21:"DIV",31:"ASC",32:"DESC",33:"LETPAR_NUM",34:"LETIMPAR_NUM",35:"REVERSE",36:"GET_ELEMENT",37:"CARACTER_ALEATORIO",38:"NUM_ALEATORIO",40:"INT",42:"STR",43:"DEC",44:"CHA",45:"BOO",46:"GLOBAL",47:"EQU",54:"COMMA",56:"AND",57:"ORS",58:"EXCLAM",59:"MENQUE",60:"MAYQUE",63:"IF",64:"THEN",68:"ELSE",71:"WHILE",72:"THENWHILE",74:"REPEAT",76:"HUNTIL",78:"num_aleatorio",80:"SEMIC",85:"FUNCTION",86:"COROPN",87:"CORCLS",88:"ONLOAD",89:"INIT",90:"LLAVOP",91:"COLON",92:"LLAVCL",93:"END",94:"ALERT_INFO",95:"EXIT",96:"REDIRECT",97:"INSERT"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,1],[7,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[24,4],[24,4],[25,4],[25,4],[26,4],[26,4],[27,4],[27,4],[28,4],[28,4],[30,4],[30,4],[29,3],[23,3],[39,2],[39,2],[39,2],[39,2],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,4],[39,4],[39,4],[39,4],[39,4],[39,5],[39,5],[39,5],[39,5],[39,5],[41,2],[41,1],[48,0],[48,3],[48,1],[49,3],[49,1],[49,3],[49,1],[50,3],[50,1],[51,3],[51,1],[51,3],[51,1],[52,3],[52,1],[55,1],[55,1],[16,4],[16,4],[16,2],[16,4],[16,4],[16,3],[16,4],[16,3],[16,4],[16,1],[61,3],[62,6],[62,6],[67,2],[69,2],[69,2],[70,6],[70,6],[73,9],[73,9],[75,1],[75,1],[77,1],[77,1],[53,1],[53,1],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[79,2],[79,1],[65,2],[65,2],[65,1],[65,1],[65,1],[65,1],[65,2],[65,2],[65,1],[65,1],[65,1],[65,1],[65,1],[6,7],[6,6],[6,1],[66,7],[81,5],[81,5],[82,4],[83,4],[84,4],[98,1],[98,3],[98,2],[98,1],[98,3],[98,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 18: case 19: case 21: case 22: case 24:
this.$ = $$[$0];
break;
case 20: case 23:
this.$ = $$[$0]; 
break;
case 25:

		this.$ = $$[$0-1].split('').sort().join('');
	
break;
case 26:
 this.$ = "ASC(" + $$[$0-1] + ")";
break;
case 27:

		this.$ = $$[$0-1].split('').sort().reverse().join('');
	
break;
case 28:
 this.$ = "DESC(" + $$[$0-1] + ")";
break;
case 29:

			var resultado = '';

			for (let i = 0; i < palabra.length; i++) {
				if (i % 2 === 0) {
					// Mantiene las letras en posiciones impares (índices pares) en ASCII
					resultado += palabra.charCodeAt(i);
				} else {
					// Deja las letras en posiciones impares (índices impares) como están
					resultado += palabra[i];
				}
			}
			this.$ = resultado;
		 
break;
case 30:
 this.$ = "LETPAR_NUM(" + $$[$0-1] +")"; 
break;
case 31:

				var resultado = '';

				for (let i = 0; i < palabra.length; i++) {
					if (i % 2 !== 0) {
						// Convierte las letras en posiciones impares (índices impares) a ASCII
						resultado += palabra.charCodeAt(i);
					} else {
						// Deja las letras en posiciones pares (índices pares) como están
						resultado += palabra[i];
					}
				}
				this.$ = resultado; 
			
break;
case 32:
 this.$ = "LETIMPAR_NUM(" + $$[$0-1] + ")"; 
break;
case 33:

			this.$ = $$[$0-1].split('').reverse().join('');
		
break;
case 34:
 this.$ = "REVERSE(" + $$[$0-1] + ")"; 
break;
case 35: case 36:
 this.$ = "getElementById(" + $$[$0-1] + ")"; 
break;
case 37:

						const esMayuscula = Math.random() < 0.5; // Decide si será mayúscula o minúscula
						const codigoAscii = esMayuscula 
							? Math.floor(Math.random() * 26) + 65  // ASCII para A-Z (65-90)
							: Math.floor(Math.random() * 26) + 97; // ASCII para a-z (97-122)
						
						this.$ =  String.fromCharCode(codigoAscii);
					
break;
case 38:

					this.$ = Math.floor(Math.random() * 10);
				
break;
case 39:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | integer | undefined | - | ambito \n";  
												});
											} 
										 
break;
case 40:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | string | undefined | - | ambito \n";  
													console.log("TABLA : " + tabla);
												});
											} 
										 
break;
case 41:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | decimal | undefined | - | ambito \n";  
												});
											} 
										 
break;
case 42:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | char | undefined | - | ambito \n";  
												});
											} 
										 
break;
case 43:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | boolean | undefined | - | ambito \n";  
												});
											} 
										 
break;
case 44:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | integer | undefined | @global | ambito \n";  
												});
											} 
										 
break;
case 45:

											console.log("DECLARACION STRING GLOBAL");
											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | string | undefined | @global | ambito \n";  
													console.log("TABLA DEC GLOBAL : " + tabla);
												});
											} 
										 
break;
case 46:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | decimal | undefined | @global | ambito \n";  
												});
											} 
										 
break;
case 47:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | char | undefined | @global | ambito \n";  
												});
											} 
										 
break;
case 48:

											var ids = $$[$0];
											if(ids != undefined && Array.isArray(ids)){
												ids.forEach(id=>{
													posicion++;
													tabla += posicion + " | " + id + " | boolean | undefined | @global | ambito \n";  
												});
											} 
										 
break;
case 49:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | integer | "+ vl +" | - | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | integer | "+ vl +" | - | ambito \n";
																}
															}

															
														}
		   										 
break;
case 50:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | string | "+ vl +" | - | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | string | "+ vl +" | - | ambito \n";
																}
															}
														}
		   										 
break;
case 51:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | decimal | "+ vl +" | - | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | decimal | "+ vl +" | - | ambito \n";
																}
															}
														}
		   										 
break;
case 52:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | char | "+ vl +" | - | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | char | "+ vl +" | - | ambito \n";
																}
															}
														}
		   										 
break;
case 53:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | boolean | "+ vl +" | - | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | boolean | "+ vl +" | - | ambito \n";
																}
															}
														}
		   										 
break;
case 54:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | integer | "+ vl +" | @global | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | integer | "+ vl +" | @global | ambito \n";
																}
															}
														}
		   										 
break;
case 55:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | string | "+ vl +" | @global | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | string | "+ vl +" | @global | ambito \n";
																}
															}
														}
		   										 
break;
case 56:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | decimal | "+ vl +" | @global | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | decimal | "+ vl +" | @global | ambito \n";
																}
															}
														}
		   										 
break;
case 57:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | char | "+ vl +" | @global | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | char | "+ vl +" | @global | ambito \n";
																}
															}
														}
		   										 
break;
case 58:

														var ids = $$[$0-2]; var valores = $$[$0]; 
														if( Array.isArray(ids) && Array.isArray(valores)){
															//Si solo hay un valor, todos los ids tienen ese valor
															if(valores.length == 1){
																var vl = valores[0];
																ids.forEach(i =>{
																	posicion++;
																	tabla += posicion + " | " + i + " | boolean | "+ vl +" | @global | ambito \n"; 
																});
															}else{
																//Si hay varios valores, asignar hasta donde sea posible
																for(let i = 0; i < ids.length;  i++){
																	posicion++;
																	var vl = "undefined"; 
																	if(i < valores.length){
																		vl = valores[i];
																	}

																	tabla += posicion + " | " + ids[i] + " | boolean | "+ vl +" | @global | ambito \n";
																}
															}
														}
		   										 
break;
case 59:

					var resultado = [];
					var identificador = $$[$0-1];
					if(identificador != undefined){
						resultado.push(identificador);
					}

					var ids = $$[$0];
					if(ids != undefined && Array.isArray(ids)){
						ids.forEach(id =>{
							resultado.push(id);
						});
					}
					this.$ = resultado; 
				
break;
case 60:

				   var resultado = [];
				   resultado.push($$[$0]);
				   this.$ = resultado;
			   
break;
case 62:

								var resultado = [];
								resultado.push($$[$0-2]);

								var ints = $$[$0];
								if(ints != undefined && Array.isArray(ints)){
									ints.forEach(i=>{
										resultado.push(i);
									});
								}
								this.$ = resultado; 
						  
break;
case 63:
 var resultado = []; resultado.push($$[$0]); this.$ = resultado; 
break;
case 64: case 66: case 68: case 70:

								var resultado = [];
								resultado.push($$[$0-2]);

								var sts = $$[$0];
								if(sts != undefined && Array.isArray(sts)){
									sts.forEach(i=>{
										resultado.push(i);
									});
								}
								this.$ = resultado;
						  
break;
case 65:
 var resultado = []; resultado.push($$[$0]); this.$ = resultado;
break;
case 67: case 69: case 71: case 73:
var resultado = []; resultado.push($$[$0]); this.$ = resultado; 
break;
case 72:

										var resultado = [];
										resultado.push($$[$0-2]);

										var sts = $$[$0];
										if(sts != undefined && Array.isArray(sts)){
											sts.forEach(i=>{
												resultado.push(i);
											});
										}
										this.$ = resultado;
						  			
break;
case 74:

								var resultado = [];
								resultado.push($$[$0-2]);

								var sts = $$[$0];
								if(sts != undefined && Array.isArray(sts)){
									sts.forEach(i=>{
										resultado.push(i);
									});
								}
								this.$ = resultado;
						   
break;
case 75:
var resultado = []; resultado.push($$[$0]); this.$ = resultado;
break;
case 76: case 77: case 100: case 102: case 103:
 this.$ = $$[$0]; 
break;
case 101:
 console.log("NUMERO RETORNADO POR PRODUCCION: " + $$[$0]); mostrarSintactico("NUMERO RETORNADO POR PRODUCCION: " + $$[$0]); this.$ = $$[$0]; 
break;
case 104:

		this.$ = $$[$0-2] + $$[$0]; 
	  
break;
case 105:

		this.$ = $$[$0-2] - $$[$0]; 
	  
break;
case 106:

		this.$ = $$[$0-2] * $$[$0]; 
	  
break;
case 107:

		this.$ = $$[$0-2] / $$[$0]; 
	  
break;
case 108:

		this.$ = $$[$0-1];
	  
break;
case 112:
mostrarSintactico("Expresion declaracion correctamente");
break;
case 113:
mostrarSintactico("Expresion asignacion terminada correctamente");
break;
case 114:
mostrarSintactico("Expresion if terminada correctamente");
break;
case 115:
mostrarSintactico("Expresion else terminada correctamente");
break;
case 116:
mostrarSintactico("Expresion repeat terminada correctamente");
break;
case 117:
mostrarSintactico("Expresion while correctamente");
break;
case 118:
mostrarSintactico("Expresion funcion correctamente");
break;
case 119:
mostrarSintactico("Expresion numero aleatorio terminada correctamente");
break;
case 120:
mostrarSintactico("Expresion alert terminada correctamente");
break;
case 121:
mostrarSintactico("Expresion exit terminada correctamente");
break;
case 122:
mostrarSintactico("Expresion redirect terminada correctamente.");
break;
case 123:
mostrarSintactico("Expresion insert terminaa correctamente.");
break;
case 124:

			mostrarSintactico('EXPRESION COMO ERROR -> \nError: ' + yytext + ' linea: ' + (this._$.first_line) + ' columna: ' + (this._$.first_column));
			this.$ = undefined;
		 
break;
case 125:

			console.log("Funcion " + $$[$0-5] + " terminada con exito.");
			mensajesSalida += "PARSER: Funcion " + $$[$0-5] + " terminada con exito.\n";
			tabla = tabla.replaceAll("ambito", $$[$0-6] + $$[$0-5] + "()");
		
break;
case 126:

			console.log("Funcion ONLOAD terminada correctamente.");
			mensajesSalida += "FPARSER: Funcion ONLOAD terminada correctamente.\n";
			//tabla = tabla.replace(/ambito/g, "ON_LOAD()");
			tabla = tabla.replaceAll("ambito", "ON_LOAD()");
		
break;
case 127:

			mostrarSintactico('FUNCION COMO ERROR -> \nError: ' + yytext + ' linea: ' + (this._$.first_line) + ' columna: ' + (this._$.first_column));
			this.$ = undefined;
		
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,85:$V1,88:$V2},{1:[3]},{5:[1,7]},{2:$V0,4:8,5:[2,3],6:3,85:$V1,88:$V2},{8:[1,9]},{15:[1,10]},o($V3,[2,127]),{1:[2,1]},{5:[2,2]},{15:[1,11]},{17:[1,12]},{17:[1,13]},{86:[1,14]},{86:[1,15]},{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:17,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,79:16,81:26,82:27,83:28,84:29,94:$Vn,95:$Vo,96:$Vp,97:$Vq},{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:17,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,79:60,81:26,82:27,83:28,84:29,94:$Vn,95:$Vo,96:$Vp,97:$Vq},{87:[1,61]},o($Vr,[2,111],{65:17,39:18,61:19,62:20,69:21,73:22,70:23,22:24,23:25,81:26,82:27,83:28,84:29,24:41,25:42,26:43,27:44,28:45,29:46,30:47,79:62,2:$V4,8:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,63:$Vj,68:$Vk,71:$Vl,74:$Vm,94:$Vn,95:$Vo,96:$Vp,97:$Vq}),{80:[1,63]},{80:[1,64]},o($Vs,[2,114]),o($Vs,[2,115]),o($Vs,[2,116]),o($Vs,[2,117]),{80:[1,65]},{80:[1,66]},o($Vs,[2,120]),o($Vs,[2,121]),o($Vs,[2,122]),o($Vs,[2,123]),o($Vs,[2,124]),{8:$Vt,41:67,46:[1,68]},{8:$Vt,41:70,46:[1,71]},{8:$Vt,41:72,46:[1,73]},{8:$Vt,41:74,46:[1,75]},{8:$Vt,41:76,46:[1,77]},{47:[1,78]},{15:[1,79]},{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:80,66:81,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,81:26,82:27,83:28,84:29,89:$Vu,94:$Vn,95:$Vo,96:$Vp,97:$Vq},{15:[1,83]},{15:[1,84]},o($Vv,[2,18]),o($Vv,[2,19]),o($Vv,[2,20]),o($Vv,[2,21]),o($Vv,[2,22]),o($Vv,[2,23]),o($Vv,[2,24]),{15:[1,85]},{15:[1,86]},{15:[1,87]},{15:[1,88]},{15:[1,89]},{15:[1,90]},{15:[1,91]},{15:[1,92]},{15:[1,93]},{15:[1,94]},{15:[1,95]},{15:[1,96]},{87:[1,97]},o($V3,[2,126]),o($Vr,[2,110]),o($Vs,[2,112]),o($Vs,[2,113]),o($Vs,[2,118]),o($Vs,[2,119]),o($Vw,[2,39],{47:[1,98]}),{8:$Vt,41:99},o($Vx,[2,60],{41:100,8:$Vt}),o($Vw,[2,40],{47:[1,101]}),{8:$Vt,41:102},o($Vw,[2,41],{47:[1,103]}),{8:$Vt,41:104},o($Vw,[2,42],{47:[1,105]}),{8:$Vt,41:106},o($Vw,[2,43],{47:[1,107]}),{8:$Vt,41:108},{7:109,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:121,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,16:120,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,58:$VG},o($Vs,[2,92]),o($Vs,[2,93]),{90:[1,123]},{8:$V5,39:126,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:125,75:124},{7:121,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,16:127,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,58:$VG},{17:[1,128]},{8:[1,130],14:[1,129]},{17:[1,131]},{17:[1,132]},{8:$VH,14:$VI,98:133},{8:[1,137],14:[1,136]},{8:[1,139],14:[1,138]},{8:[1,141],14:[1,140]},{8:[1,143],14:[1,142]},{8:[1,145],14:[1,144]},{17:[1,146]},{8:[1,148],14:[1,147]},o($V3,[2,125]),o($Vw,$VJ,{48:149,53:150,11:$VK,12:$VL,15:$VM,78:$VN}),o($Vw,[2,44],{47:[1,155]}),o($Vx,[2,59]),{14:$VO,22:158,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,49:156},o($Vw,[2,45],{47:[1,159]}),{11:$VP,50:160},o($Vw,[2,46],{47:[1,162]}),{13:$VQ,29:165,37:$Vc,51:163},o($Vw,[2,47],{47:[1,166]}),{9:$VR,10:$VS,52:167,55:168},o($Vw,[2,48],{47:[1,171]}),o($Vw,[2,88],{18:$VT,19:$VU,20:$VV,21:$VW}),o($VX,[2,4]),o($VX,[2,5]),o($VX,[2,6]),o($VX,[2,7]),o($VX,[2,8]),o($VX,[2,9]),o($VX,[2,10]),{7:121,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,16:176,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,58:$VG},o($VX,[2,16]),o($VX,[2,17]),{17:[1,177]},{17:[2,87],18:$VT,19:$VU,20:$VV,21:$VW,47:[1,180],56:[1,178],57:[1,179],58:[1,181],59:[1,182],60:[1,183]},{7:184,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{91:[1,185]},{17:[1,186]},{17:[2,98]},{17:[2,99]},{17:[1,187]},o($VX,[2,38]),{17:[1,188]},{17:[1,189]},{80:[1,190]},{80:[1,191]},{17:[1,192]},{8:$VH,14:$VI,17:[2,134],54:[1,193],98:194},{17:[2,137],54:[1,195],84:196,97:$Vq},{17:[1,197]},{17:[1,198]},{17:[1,199]},{17:[1,200]},{17:[1,201]},{17:[1,202]},{17:[1,203]},{17:[1,204]},{17:[1,205]},{17:[1,206]},o($Vv,[2,37]),{17:[1,207]},{17:[1,208]},o($Vw,[2,49]),o($Vw,[2,63],{18:$VY,19:$VZ,20:$V_,21:$V$,54:[1,209]}),o($V01,[2,102]),o($V01,[2,103]),{11:$VK,12:$VL,15:$VM,53:214,78:$VN},o($V01,[2,109]),o($Vw,$VJ,{53:150,48:215,11:$VK,12:$VL,15:$VM,78:$VN}),o($Vw,[2,50]),o($Vw,[2,65],{54:[1,216]}),o($Vw,[2,67],{54:[1,217]}),{14:$VO,22:158,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,49:218},o($Vw,[2,51]),o($Vw,[2,69],{54:[1,219]}),{11:$VP,50:220},o($Vw,[2,52]),o($Vw,[2,71],{54:[1,221]}),o($Vw,[2,73],{54:[1,222]}),{13:$VQ,29:165,37:$Vc,51:223},o($Vw,[2,53]),o($Vw,[2,75],{54:[1,224]}),o($V11,[2,76]),o($V11,[2,77]),{9:$VR,10:$VS,52:225,55:168},{7:226,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:227,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:228,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:229,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{17:[1,230]},{64:[1,231]},{56:[1,232]},{57:[1,233]},{47:[1,234]},{47:[1,235]},{7:236,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,47:[1,237]},{7:238,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,47:[1,239]},{17:[2,80],18:$VT,19:$VU,20:$VV,21:$VW},{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:17,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,79:240,81:26,82:27,83:28,84:29,94:$Vn,95:$Vo,96:$Vp,97:$Vq},{76:[1,241]},{72:[1,242]},{80:[1,243]},{80:[1,244]},o($Vs,[2,131]),o($Vs,[2,132]),o([2,8,17,31,32,33,34,35,36,37,38,40,42,43,44,45,63,68,71,74,87,91,94,95,96,97],[2,133]),{8:$VH,14:$VI,98:245},{17:[2,136]},{8:$VH,14:$VI,98:246},{17:[2,139]},o($Vv,[2,25]),o($Vv,[2,26]),o($Vv,[2,27]),o($Vv,[2,28]),o($Vv,[2,29]),o($Vv,[2,30]),o($Vv,[2,31]),o($Vv,[2,32]),o($Vv,[2,33]),o($Vv,[2,34]),o($Vv,[2,35]),o($Vv,[2,36]),o($Vw,$VJ,{53:150,48:247,11:$VK,12:$VL,15:$VM,78:$VN}),{11:$VK,12:$VL,15:$VM,53:248,78:$VN},{11:$VK,12:$VL,15:$VM,53:249,78:$VN},{11:$VK,12:$VL,15:$VM,53:250,78:$VN},{11:$VK,12:$VL,15:$VM,53:251,78:$VN},{17:[1,252],18:$VY,19:$VZ,20:$V_,21:$V$},o($Vw,[2,54]),{14:$VO,22:158,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,49:253},{14:$VO,22:158,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,49:254},o($Vw,[2,55]),{11:$VP,50:255},o($Vw,[2,56]),{13:$VQ,29:165,37:$Vc,51:256},{13:$VQ,29:165,37:$Vc,51:257},o($Vw,[2,57]),{9:$VR,10:$VS,52:258,55:168},o($Vw,[2,58]),o($V21,[2,12],{20:$VV,21:$VW}),o($V21,[2,13],{20:$VV,21:$VW}),o($VX,[2,14]),o($VX,[2,15]),o($VX,[2,11]),{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:259,66:260,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,81:26,82:27,83:28,84:29,89:$Vu,94:$Vn,95:$Vo,96:$Vp,97:$Vq},{7:261,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:262,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:263,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{7:264,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{17:[2,83],18:$VT,19:$VU,20:$VV,21:$VW},{7:265,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{17:[2,85],18:$VT,19:$VU,20:$VV,21:$VW},{7:266,8:$Vy,9:$Vz,10:$VA,11:$VB,12:$VC,13:$VD,14:$VE,15:$VF,22:118,23:119,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{91:[1,267]},{15:[1,268]},{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:269,66:270,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,81:26,82:27,83:28,84:29,89:$Vu,94:$Vn,95:$Vo,96:$Vp,97:$Vq},o($Vs,[2,129]),o($Vs,[2,130]),{17:[2,135]},{17:[2,138]},o($Vw,[2,62]),o($V31,[2,104],{20:$V_,21:$V$}),o($V31,[2,105],{20:$V_,21:$V$}),o($V01,[2,106]),o($V01,[2,107]),o($V01,[2,108]),o($Vw,[2,64]),o($Vw,[2,66]),o($Vw,[2,68]),o($Vw,[2,70]),o($Vw,[2,72]),o($Vw,[2,74]),o($Vs,[2,89]),o($Vs,[2,90]),{17:[2,78],18:$VT,19:$VU,20:$VV,21:$VW},{17:[2,79],18:$VT,19:$VU,20:$VV,21:$VW},{17:[2,81],18:$VT,19:$VU,20:$VV,21:$VW},{17:[2,82],18:$VT,19:$VU,20:$VV,21:$VW},{17:[2,84],18:$VT,19:$VU,20:$VV,21:$VW},{17:[2,86],18:$VT,19:$VU,20:$VV,21:$VW},{92:[1,271]},{8:[1,273],11:$VK,12:$VL,15:$VM,53:274,77:272,78:$VN},o($Vs,[2,94]),o($Vs,[2,95]),{93:[1,275]},{17:[1,276]},{17:[2,100]},{17:[2,101],18:$VY,19:$VZ,20:$V_,21:$V$},o($Vs,[2,128]),{2:$V4,8:$V5,22:24,23:25,24:41,25:42,26:43,27:44,28:45,29:46,30:47,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:18,40:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,61:19,62:20,63:$Vj,65:277,66:278,68:$Vk,69:21,70:23,71:$Vl,73:22,74:$Vm,81:26,82:27,83:28,84:29,89:$Vu,94:$Vn,95:$Vo,96:$Vp,97:$Vq},o($Vs,[2,96]),o($Vs,[2,97])],
defaultActions: {7:[2,1],8:[2,2],125:[2,98],126:[2,99],194:[2,136],196:[2,139],245:[2,135],246:[2,138],273:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Codigo incrustado javascript   

		//Para tabla de simbolos: 
		var tabla = "";
		var posicion = 0;

		exports.obtenerTabla = function() {
			return tabla; 
		};



        //Codigo javascript incrustado 
        function mostrarToken(mensaje, token){
			console.log("Token: " + mensaje + " | Valor: " + token);
			mensajesSalida += "\nLEXER: \n"
			mensajesSalida += "Token: " + mensaje + " | Valor: " + token + "\n";
		}

		var nombrePagina = "a";
		var codigoPagina = "b";
		var mensajesSalida ="";

		exports.obtenerNombre = function(){
			return nombrePagina;
		};
		exports.obtenerCodigo = function(){
			return codigoPagina;
		};
		exports.obtenerMensajes = function(){
			return mensajesSalida;
		};
		exports.limpiarMensajes = function(){
			mensajesSalida = "";
			codigoPagina = "";
			tabla = "";
			posicion = 0; 
		};


		function mostrarSintactico(mensaje){
			console.log(mensaje);
			mensajesSalida += "\nPARSER: \n";
			mensajesSalida += mensaje + "\n";
		};

		function mostrarError(error){
			mensajesSalida += "\nPARSER: \n";
			mensajesSalida += error.message + "\n";
			console.error(error.message)
		}





		


    /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar */
break;
case 1:/* Encabezado de script, ignorar */
break;
case 2:/* Pie de script, ignorar */
break;
case 3:/* Comentario una linea */
break;
case 4:/* Comentario multilinea */
break;
case 5:mostrarToken('FUNCTION', yy_.yytext);  return 85;
break;
case 6:mostrarToken('ONLOAD',   yy_.yytext);  return 88  ;
break;
case 7:mostrarToken('GLOBAL',   yy_.yytext);  return 46  ;
break;
case 8:mostrarToken('IF',   yy_.yytext); return 63  ;
break;
case 9:mostrarToken('THEN', yy_.yytext); return 64;
break;
case 10:mostrarToken('ELSE', yy_.yytext); return 68;
break;
case 11:mostrarToken('REPEAT', yy_.yytext); return 74;
break;
case 12:mostrarToken('HUNTIL', yy_.yytext); return 76;
break;
case 13:mostrarToken('WHILE'    , yy_.yytext);  return 71    ;
break;
case 14:mostrarToken('THENWHILE', yy_.yytext);  return 72;
break;
case 15:mostrarToken('INIT', yy_.yytext); return 89;
break;
case 16:mostrarToken('END',  yy_.yytext); return 93 ;
break;
case 17:mostrarToken('INSERT', yy_.yytext); return 97;
break;
case 18:mostrarToken('INT', yy_.yytext); return 40;
break;
case 19:mostrarToken('STR', yy_.yytext); return 42;
break;
case 20:mostrarToken('DEC', yy_.yytext); return 43;
break;
case 21:mostrarToken('CHR', yy_.yytext); return 'CHR';
break;
case 22:mostrarToken('BOO', yy_.yytext); return 45;
break;
case 23:mostrarToken('ASC'					, yy_.yytext); return 31					;
break;
case 24:mostrarToken('DESC'				, yy_.yytext); return 32				;
break;
case 25:mostrarToken('LETPAR_NUM'			, yy_.yytext); return 33			;
break;
case 26:mostrarToken('LETIMPAR_NUM'		, yy_.yytext); return 34		;
break;
case 27:mostrarToken('REVERSE'				, yy_.yytext); return 35				;
break;
case 28:mostrarToken('CARACTER_ALEATORIO'	, yy_.yytext); return 37	;
break;
case 29:mostrarToken('NUM_ALEATORIO'		, yy_.yytext); return 38		;
break;
case 30:mostrarToken('GET_ELEMENT'			, yy_.yytext); return 36         ;
break;
case 31:mostrarToken('ALERT_INFO'			, yy_.yytext); return 94			;
break;
case 32:mostrarToken('EXIT'				, yy_.yytext); return 95				;
break;
case 33:mostrarToken('REDIRECT'			, yy_.yytext); return 96			;
break;
case 34:mostrarToken('INSERT'              , yy_.yytext); return 97              ;
break;
case 35:mostrarToken("PAROPN", yy_.yytext); return  'PAROPN';
break;
case 36:mostrarToken("PARCLS", yy_.yytext); return  'PARCLS';
break;
case 37:mostrarToken("COROPN", yy_.yytext); return  'COROPN';
break;
case 38:mostrarToken("CORCLS", yy_.yytext); return  'CORCLS';
break;
case 39:mostrarToken("LLAVOP", yy_.yytext); return  'LLAVOP';
break;
case 40:mostrarToken("LLAVCL", yy_.yytext); return  'LLAVCL';
break;
case 41:mostrarToken("COMMA",  yy_.yytext); return  'COMMA' ;
break;
case 42:mostrarToken("SEMIC",  yy_.yytext); return  'SEMIC' ;
break;
case 43:mostrarToken("COLON",  yy_.yytext); return  'COLON' ;
break;
case 44:mostrarToken('EQU' ,yy_.yytext); return 47; 
break;
case 45:mostrarToken('MAS' ,yy_.yytext); return 18; 
break;
case 46:mostrarToken('MEN' ,yy_.yytext); return 19; 
break;
case 47:mostrarToken('DIV' ,yy_.yytext); return 21; 
break;
case 48:mostrarToken('TIM' ,yy_.yytext); return 20; 
break;
case 49:mostrarToken('EXC' ,yy_.yytext); return 'EXC'; 
break;
case 50:mostrarToken('MEN' ,yy_.yytext); return 19; 
break;
case 51:mostrarToken('MAY' ,yy_.yytext); return 'MAY'; 
break;
case 52:mostrarToken('ORS' ,yy_.yytext); return 57; 
break;
case 53:mostrarToken('AND' ,yy_.yytext); return 56; 
break;
case 54:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 55:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 56:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 57:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 58:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 59:mostrarToken("CHAR"  , yy_.yytext); 	return 13	;
break;
case 60:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 61:mostrarToken("TRUE"	, yy_.yytext); 	return 9	;
break;
case 62:mostrarToken("FALSE"	, yy_.yytext); 	return 10	;
break;
case 63:mostrarToken("DECIMAL", yy_.yytext); 	return 11;
break;
case 64:mostrarToken("INTEGER", yy_.yytext); 	return 12;
break;
case 65:mostrarToken("ID"		, yy_.yytext); 	return 8		;
break;
case 66:return 5
break;
case 67:  
								//mensajesSalida += "\nLEXER: \n";
								//mensajesSalida += "ERROR SINTACTICO: No se reconoce " + yy_.yytext + " como un simbolo valido.\n";
								//return 'INVALID';
							
break;
}
},
rules: [/^(?:[ \r\t\n])/,/^(?:<C_SCRIPTING>)/,/^(?:<\/C_SCRIPTING>)/,/^(?:!!.*)/,/^(?:<!--([\s\S]*?)-->)/,/^(?:FUNCTION_?)/,/^(?:ON_LOAD\b)/,/^(?:@global\b)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:ELSE\b)/,/^(?:REPEAT\b)/,/^(?:HUNTIL\b)/,/^(?:WHILE\b)/,/^(?:THENWHILE\b)/,/^(?:INIT\b)/,/^(?:END\b)/,/^(?:INSERT\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:ASC\b)/,/^(?:DESC\b)/,/^(?:LETPAR_NUM\b)/,/^(?:LETIMPAR_NUM\b)/,/^(?:REVERSE\b)/,/^(?:CARACTER_ALEATORIO\b)/,/^(?:NUM_ALEATORIO\b)/,/^(?:getElementById?)/,/^(?:ALERT_INFO\b)/,/^(?:EXIT\b)/,/^(?:REDIRECT\b)/,/^(?:INSERT\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:\|)/,/^(?:&)/,/^(?:("([\s\S]*?)"))/,/^(?:(“([\s\S]*?)“))/,/^(?:(”([\s\S]*?)”))/,/^(?:(“([\s\S]*?)”))/,/^(?:(”([\s\S]*?)“))/,/^(?:'[a-zA-Z]'\b)/,/^(?:('([\s\S]*?)'))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z_$-][a-zA-Z0-9_$-]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CLC;
exports.Parser = CLC.Parser;
exports.parse = function () { return CLC.parse.apply(CLC, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}