/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CLC = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,5],$V3=[2,5,63,66],$V4=[1,24],$V5=[1,30],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,31],$Vc=[1,32],$Vd=[1,34],$Ve=[1,33],$Vf=[65,69],$Vg=[2,8,23,25,26,27,28,46,51,54,57,65,69],$Vh=[1,42],$Vi=[1,55],$Vj=[17,44],$Vk=[17,30,44],$Vl=[1,71],$Vm=[1,72],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,81],$Vu=[1,88],$Vv=[1,91],$Vw=[1,94],$Vx=[1,97],$Vy=[1,101],$Vz=[1,102],$VA=[1,105],$VB=[1,106],$VC=[1,107],$VD=[1,108],$VE=[17,18,19,20,21,30,38,39,40,41,42,44],$VF=[17,36,44],$VG=[17,18,19,30,38,39,40,41,42,44],$VH=[1,170],$VI=[1,169],$VJ=[1,171],$VK=[1,174],$VL=[1,175],$VM=[1,176],$VN=[1,177],$VO=[17,18,19,20,21],$VP=[17,18,19];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"functions":4,"EOF":5,"function":6,"valor":7,"ID":8,"TRUE":9,"FALSE":10,"DECIMAL":11,"INTEGER":12,"CHAR":13,"STRING":14,"PAROPN":15,"condicion":16,"PARCLS":17,"MAS":18,"MEN":19,"TIM":20,"DIV":21,"declaracion":22,"INT":23,"identificadores":24,"STR":25,"DEC":26,"CHA":27,"BOO":28,"GLOBAL":29,"EQU":30,"ints":31,"strs":32,"decs":33,"chas":34,"boos":35,"COMMA":36,"valbool":37,"AND":38,"ORS":39,"EXCLAM":40,"MENQUE":41,"MAYQUE":42,"asignacion":43,"SEMIC":44,"if_exp":45,"IF":46,"THEN":47,"expresion":48,"bloque_ins":49,"elif_exp":50,"ELSE":51,"else_exp":52,"while_exp":53,"WHILE":54,"THENWHILE":55,"repeat":56,"REPEAT":57,"variable":58,"HUNTIL":59,"num":60,"numero":61,"expresiones":62,"FUNCTION":63,"COROPN":64,"CORCLS":65,"ONLOAD":66,"INIT":67,"LLAVOP":68,"COLON":69,"LLAVCL":70,"END":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"TRUE",10:"FALSE",11:"DECIMAL",12:"INTEGER",13:"CHAR",14:"STRING",15:"PAROPN",17:"PARCLS",18:"MAS",19:"MEN",20:"TIM",21:"DIV",23:"INT",25:"STR",26:"DEC",27:"CHA",28:"BOO",29:"GLOBAL",30:"EQU",36:"COMMA",38:"AND",39:"ORS",40:"EXCLAM",41:"MENQUE",42:"MAYQUE",44:"SEMIC",46:"IF",47:"THEN",51:"ELSE",54:"WHILE",55:"THENWHILE",57:"REPEAT",59:"HUNTIL",63:"FUNCTION",64:"COROPN",65:"CORCLS",66:"ONLOAD",67:"INIT",68:"LLAVOP",69:"COLON",70:"LLAVCL",71:"END"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[7,3],[7,3],[7,3],[7,3],[22,2],[22,2],[22,2],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,4],[22,4],[22,4],[22,4],[22,4],[22,5],[22,5],[22,5],[22,5],[22,5],[24,2],[24,1],[31,3],[31,1],[32,3],[32,1],[33,3],[33,1],[34,3],[34,1],[35,3],[35,1],[37,1],[37,1],[16,4],[16,4],[16,2],[16,4],[16,4],[16,3],[16,4],[16,3],[16,4],[16,1],[43,4],[45,6],[45,6],[50,2],[52,2],[52,2],[53,6],[53,6],[56,9],[56,9],[58,1],[58,1],[60,1],[60,1],[61,1],[61,1],[61,3],[61,3],[61,3],[61,3],[61,3],[62,2],[62,1],[48,2],[48,2],[48,1],[48,1],[48,1],[48,1],[48,1],[6,7],[6,6],[6,1],[49,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 72: case 74: case 75:
 this.$ = $$[$0]; 
break;
case 73:
 console.log("NUMERO RETORNADO POR PRODUCCION: " + $$[$0]);  this.$ = $$[$0]; 
break;
case 76:

		this.$ = $$[$0-2] + $$[$0]; 
	  
break;
case 77:

		this.$ = $$[$0-2] - $$[$0]; 
	  
break;
case 78:

		this.$ = $$[$0-2] * $$[$0]; 
	  
break;
case 79:

		this.$ = $$[$0-2] / $$[$0]; 
	  
break;
case 80:

		this.$ = $$[$0-1];
	  
break;
case 89:

			mostrarSintactico('EXPRESION COMO ERROR -> \nError: ' + yytext + ' linea: ' + (this._$.first_line) + ' columna: ' + (this._$.first_column));
			this.$ = undefined;
		 
break;
case 90:

			console.log("Funcion " + $$[$0-5] + " terminada con exito.");
			mensajesSalida += "PARSER: Funcion " + $$[$0-5] + " terminada con exito.\n";
		
break;
case 91:

			console.log("Funcion ONLOAD terminada correctamente.");
			mensajesSalida += "FPARSER: Funcion ONLOAD terminada correctamente.\n";
		
break;
case 92:

			mostrarSintactico('FUNCION COMO ERROR -> \nError: ' + yytext + ' linea: ' + (this._$.first_line) + ' columna: ' + (this._$.first_column));
			this.$ = undefined;
		
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,63:$V1,66:$V2},{1:[3]},{5:[1,7]},{2:$V0,4:8,5:[2,3],6:3,63:$V1,66:$V2},{8:[1,9]},{15:[1,10]},o($V3,[2,92]),{1:[2,1]},{5:[2,2]},{15:[1,11]},{17:[1,12]},{17:[1,13]},{64:[1,14]},{64:[1,15]},{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:17,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,62:16},{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:17,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,62:35},{65:[1,36]},o($Vf,[2,82],{48:17,22:18,43:19,45:20,52:21,56:22,53:23,62:37,2:$V4,8:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,46:$Vb,51:$Vc,54:$Vd,57:$Ve}),{44:[1,38]},{44:[1,39]},o($Vg,[2,85]),o($Vg,[2,86]),o($Vg,[2,87]),o($Vg,[2,88]),o($Vg,[2,89]),{8:$Vh,24:40,29:[1,41]},{8:$Vh,24:43,29:[1,44]},{8:$Vh,24:45,29:[1,46]},{8:$Vh,24:47,29:[1,48]},{8:$Vh,24:49,29:[1,50]},{30:[1,51]},{15:[1,52]},{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:53,49:54,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,67:$Vi},{15:[1,56]},{15:[1,57]},{65:[1,58]},o($V3,[2,91]),o($Vf,[2,81]),o($Vg,[2,83]),o($Vg,[2,84]),o($Vj,[2,16],{30:[1,59]}),{8:$Vh,24:60},o($Vk,[2,37],{24:61,8:$Vh}),o($Vj,[2,17],{30:[1,62]}),{8:$Vh,24:63},o($Vj,[2,18],{30:[1,64]}),{8:$Vh,24:65},o($Vj,[2,19],{30:[1,66]}),{8:$Vh,24:67},o($Vj,[2,20],{30:[1,68]}),{8:$Vh,24:69},{7:70,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:80,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:79,40:$Vt},o($Vg,[2,64]),o($Vg,[2,65]),{68:[1,82]},{8:$V5,22:85,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:84,58:83},{7:80,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:86,40:$Vt},o($V3,[2,90]),{12:$Vu,31:87},o($Vj,[2,21],{30:[1,89]}),o($Vk,[2,36]),{14:$Vv,32:90},o($Vj,[2,22],{30:[1,92]}),{11:$Vw,33:93},o($Vj,[2,23],{30:[1,95]}),{13:$Vx,34:96},o($Vj,[2,24],{30:[1,98]}),{9:$Vy,10:$Vz,35:99,37:100},o($Vj,[2,25],{30:[1,103]}),{18:$VA,19:$VB,20:$VC,21:$VD,44:[1,104]},o($VE,[2,4]),o($VE,[2,5]),o($VE,[2,6]),o($VE,[2,7]),o($VE,[2,8]),o($VE,[2,9]),o($VE,[2,10]),{7:80,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:109,40:$Vt},{17:[1,110]},{17:[2,59],18:$VA,19:$VB,20:$VC,21:$VD,30:[1,113],38:[1,111],39:[1,112],40:[1,114],41:[1,115],42:[1,116]},{7:117,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{69:[1,118]},{17:[1,119]},{17:[2,70]},{17:[2,71]},{17:[1,120]},o($Vj,[2,26]),o($Vj,[2,39],{36:[1,121]}),{12:$Vu,31:122},o($Vj,[2,27]),o($Vj,[2,41],{36:[1,123]}),{14:$Vv,32:124},o($Vj,[2,28]),o($Vj,[2,43],{36:[1,125]}),{11:$Vw,33:126},o($Vj,[2,29]),o($Vj,[2,45],{36:[1,127]}),{13:$Vx,34:128},o($Vj,[2,30]),o($Vj,[2,47],{36:[1,129]}),o($VF,[2,48]),o($VF,[2,49]),{9:$Vy,10:$Vz,35:130,37:100},o($Vj,[2,60]),{7:131,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:132,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:133,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:134,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{17:[1,135]},{47:[1,136]},{38:[1,137]},{39:[1,138]},{30:[1,139]},{30:[1,140]},{7:141,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,30:[1,142]},{7:143,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,30:[1,144]},{17:[2,52],18:$VA,19:$VB,20:$VC,21:$VD},{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:17,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,62:145},{59:[1,146]},{55:[1,147]},{12:$Vu,31:148},o($Vj,[2,31]),{14:$Vv,32:149},o($Vj,[2,32]),{11:$Vw,33:150},o($Vj,[2,33]),{13:$Vx,34:151},o($Vj,[2,34]),{9:$Vy,10:$Vz,35:152,37:100},o($Vj,[2,35]),o($VG,[2,12],{20:$VC,21:$VD}),o($VG,[2,13],{20:$VC,21:$VD}),o($VE,[2,14]),o($VE,[2,15]),o($VE,[2,11]),{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:153,49:154,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,67:$Vi},{7:155,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:156,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:157,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{7:158,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{17:[2,55],18:$VA,19:$VB,20:$VC,21:$VD},{7:159,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{17:[2,57],18:$VA,19:$VB,20:$VC,21:$VD},{7:160,8:$Vl,9:$Vm,10:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs},{69:[1,161]},{15:[1,162]},{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:163,49:164,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,67:$Vi},o($Vj,[2,38]),o($Vj,[2,40]),o($Vj,[2,42]),o($Vj,[2,44]),o($Vj,[2,46]),o($Vg,[2,61]),o($Vg,[2,62]),{17:[2,50],18:$VA,19:$VB,20:$VC,21:$VD},{17:[2,51],18:$VA,19:$VB,20:$VC,21:$VD},{17:[2,53],18:$VA,19:$VB,20:$VC,21:$VD},{17:[2,54],18:$VA,19:$VB,20:$VC,21:$VD},{17:[2,56],18:$VA,19:$VB,20:$VC,21:$VD},{17:[2,58],18:$VA,19:$VB,20:$VC,21:$VD},{70:[1,165]},{8:[1,167],11:$VH,12:$VI,15:$VJ,60:166,61:168},o($Vg,[2,66]),o($Vg,[2,67]),{71:[1,172]},{17:[1,173]},{17:[2,72]},{17:[2,73],18:$VK,19:$VL,20:$VM,21:$VN},o($VO,[2,74]),o($VO,[2,75]),{11:$VH,12:$VI,15:$VJ,61:178},o($Vg,[2,93]),{2:$V4,8:$V5,22:18,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va,43:19,45:20,46:$Vb,48:179,49:180,51:$Vc,52:21,53:23,54:$Vd,56:22,57:$Ve,67:$Vi},{11:$VH,12:$VI,15:$VJ,61:181},{11:$VH,12:$VI,15:$VJ,61:182},{11:$VH,12:$VI,15:$VJ,61:183},{11:$VH,12:$VI,15:$VJ,61:184},{17:[1,185],18:$VK,19:$VL,20:$VM,21:$VN},o($Vg,[2,68]),o($Vg,[2,69]),o($VP,[2,76],{20:$VM,21:$VN}),o($VP,[2,77],{20:$VM,21:$VN}),o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80])],
defaultActions: {7:[2,1],8:[2,2],84:[2,70],85:[2,71],167:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Codigo incrustado javascript   

        //Codigo javascript incrustado 
        function mostrarToken(mensaje, token){
			console.log("Token: " + mensaje + " | Valor: " + token);
			mensajesSalida += "\nLEXER: \n"
			mensajesSalida += "Token: " + mensaje + " | Valor: " + token + "\n";
		}

		var nombrePagina = "a";
		var codigoPagina = "b";
		var mensajesSalida ="";

		exports.obtenerNombre = function(){
			return nombrePagina;
		};
		exports.obtenerCodigo = function(){
			return codigoPagina;
		};
		exports.obtenerMensajes = function(){
			return mensajesSalida;
		};
		exports.limpiarMensajes = function(){
			mensajesSalida = "";
		};


		function mostrarSintactico(mensaje){
			console.log(mensaje);
			mensajesSalida += "\nPARSER: \n";
			mensajesSalida += mensaje + "\n";
		};

		function mostrarError(error){
			mensajesSalida += "\nPARSER: \n";
			mensajesSalida += error.message + "\n";
			console.error(error.message)
		}
    /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar */
break;
case 1:/* Encabezado de script, ignorar */
break;
case 2:/* Pie de script, ignorar */
break;
case 3:/* Comentario una linea */
break;
case 4:/* Comentario multilinea */
break;
case 5:mostrarToken('FUNCTION', yy_.yytext);  return 63;
break;
case 6:mostrarToken('ONLOAD',   yy_.yytext);  return 66  ;
break;
case 7:mostrarToken('GLOBAL',   yy_.yytext);  return 29  ;
break;
case 8:mostrarToken('IF',   yy_.yytext); return 46  ;
break;
case 9:mostrarToken('THEN', yy_.yytext); return 47;
break;
case 10:mostrarToken('ELSE', yy_.yytext); return 51;
break;
case 11:mostrarToken('REPEAT', yy_.yytext); return 57;
break;
case 12:mostrarToken('HUNTIL', yy_.yytext); return 59;
break;
case 13:mostrarToken('WHILE'    , yy_.yytext);  return 54    ;
break;
case 14:mostrarToken('THENWHILE', yy_.yytext);  return 55;
break;
case 15:mostrarToken('INIT', yy_.yytext); return 67;
break;
case 16:mostrarToken('END',  yy_.yytext); return 71 ;
break;
case 17:mostrarToken('INSERT', yy_.yytext); return 'INSERT';
break;
case 18:mostrarToken('INT', yy_.yytext); return 23;
break;
case 19:mostrarToken('STR', yy_.yytext); return 25;
break;
case 20:mostrarToken('DEC', yy_.yytext); return 26;
break;
case 21:mostrarToken('CHR', yy_.yytext); return 'CHR';
break;
case 22:mostrarToken('BOO', yy_.yytext); return 28;
break;
case 23:mostrarToken("PAROPN", yy_.yytext); return  'PAROPN';
break;
case 24:mostrarToken("PARCLS", yy_.yytext); return  'PARCLS';
break;
case 25:mostrarToken("COROPN", yy_.yytext); return  'COROPN';
break;
case 26:mostrarToken("CORCLS", yy_.yytext); return  'CORCLS';
break;
case 27:mostrarToken("LLAVOP", yy_.yytext); return  'LLAVOP';
break;
case 28:mostrarToken("LLAVCL", yy_.yytext); return  'LLAVCL';
break;
case 29:mostrarToken("COMMA",  yy_.yytext); return  'COMMA' ;
break;
case 30:mostrarToken("SEMIC",  yy_.yytext); return  'SEMIC' ;
break;
case 31:mostrarToken("COLON",  yy_.yytext); return  'COLON' ;
break;
case 32:mostrarToken('EQU' ,yy_.yytext); return 30; 
break;
case 33:mostrarToken('MAS' ,yy_.yytext); return 18; 
break;
case 34:mostrarToken('MEN' ,yy_.yytext); return 19; 
break;
case 35:mostrarToken('DIV' ,yy_.yytext); return 21; 
break;
case 36:mostrarToken('TIM' ,yy_.yytext); return 20; 
break;
case 37:mostrarToken('EXC' ,yy_.yytext); return 'EXC'; 
break;
case 38:mostrarToken('MEN' ,yy_.yytext); return 19; 
break;
case 39:mostrarToken('MAY' ,yy_.yytext); return 'MAY'; 
break;
case 40:mostrarToken('ORS' ,yy_.yytext); return 39; 
break;
case 41:mostrarToken('AND' ,yy_.yytext); return 38; 
break;
case 42:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 43:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 44:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 45:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 46:mostrarToken("STRING", yy_.yytext);   return 14 ;
break;
case 47:mostrarToken("CHAR"  , yy_.yytext); 	return 13	;
break;
case 48:mostrarToken("TRUE"	, yy_.yytext); 	return 9	;
break;
case 49:mostrarToken("FALSE"	, yy_.yytext); 	return 10	;
break;
case 50:mostrarToken("DECIMAL",yy_.yytext); 	return 11;
break;
case 51:mostrarToken("INTEGER", yy_.yytext); 	return 12;
break;
case 52:mostrarToken("ID"		, yy_.yytext); 	return 8		;
break;
case 53:return 5
break;
case 54:  
								//mensajesSalida += "\nLEXER: \n";
								//mensajesSalida += "ERROR SINTACTICO: No se reconoce " + yy_.yytext + " como un simbolo valido.\n";
								//return 'INVALID';
							
break;
}
},
rules: [/^(?:[ \r\t\n])/,/^(?:<C_SCRIPTING>)/,/^(?:<\/C_SCRIPTING>)/,/^(?:!!.*)/,/^(?:<!--([\s\S]*?)-->)/,/^(?:FUNCTION_?)/,/^(?:ON_LOAD\b)/,/^(?:@global\b)/,/^(?:IF\b)/,/^(?:THEN\b)/,/^(?:ELSE\b)/,/^(?:REPEAT\b)/,/^(?:HUNTIL\b)/,/^(?:WHILE\b)/,/^(?:THENWHILE\b)/,/^(?:INIT\b)/,/^(?:END\b)/,/^(?:INSERT\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:\|)/,/^(?:&)/,/^(?:("([\s\S]*?)"))/,/^(?:(“([\s\S]*?)“))/,/^(?:(”([\s\S]*?)”))/,/^(?:(“([\s\S]*?)”))/,/^(?:(”([\s\S]*?)“))/,/^(?:\\'[a-zA-Z]\\'\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z_$-][a-zA-Z0-9_$-]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CLC;
exports.Parser = CLC.Parser;
exports.parse = function () { return CLC.parse.apply(CLC, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}